//macro definitions for setting the song table
#define SongTableOffset  0x224470
#define SongTable(index,SongPointer,Group) "PUSH; ORG SongTableOffset+(8*index); POIN SongPointer; SHORT Group Group; POP"
#define BattleMusicGroup 0
#define MapMusicGroup 1
#define SFXGroup 6

#define voicegroup000 MusicVoices //to save some time later

// --------------- TABLE ENTRY DEFINITIONS ---------------

  #define VoiceDirect(VoiceTable,VoiceIndex,BaseNote,Address,FixedFreq,IsForcedPan,Pan,EnvAtk,EnvDec,EnvSus,EnvRel) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $00+FixedFreq*0x8 BaseNote $00 IsForcedPan*0x80+Pan; POIN Address; BYTE EnvAtk EnvDec EnvSus EnvRel"
  #define VoiceSquare1(VoiceTable,VoiceIndex,DutyCycle,NoteOffWithNoise,SweepTime,SweepShift,EnvAtk,EnvDec,EnvSus,EnvRel) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $01+NoteOffWithNoise*8 $3c $00 SweepTime*10+SweepShift DutyCycle $00 $00 $00 EnvAtk EnvDec EnvSus EnvRel" 
  #define VoiceSquare2(VoiceTable,VoiceIndex,DutyCycle,NoteOffWithNoise,EnvAtk,EnvDec,EnvSus,EnvRel) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $02+NoteOffWithNoise*8 $3c $00 $00 DutyCycle $00 $00 $00 EnvAtk EnvDec EnvSus EnvRel" 
  #define VoiceWave(VoiceTable,VoiceIndex,WaveData,NoteOffWithNoise,EnvAtk,EnvDec,EnvSus,EnvRel) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $03+NoteOffWithNoise*8 $3c $00 $00; POIN WaveData; BYTE EnvAtk EnvDec EnvSus EnvRel"
  #define VoiceNoise(VoiceTable,VoiceIndex,NoisePattern,NoteOffWithNoise,EnvAtk,EnvDec,EnvSus,EnvRel) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $04+NoteOffWithNoise*8 $3c $00 $00 NoisePattern  $00 $00 $00 EnvAtk EnvDec EnvSus EnvRel"
  #define VoiceMulti(VoiceTable,VoiceIndex,MultiSampleTable,NoteChart) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $40 $3c $00 $00; POIN MultiSampleTable; POIN NoteChart"
  #define VoiceDrum(VoiceTable,VoiceIndex,DrumTable) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $80 $3c $00 $00; POIN DrumTable; BYTE $00 $00 $00 $00"
  #define VoiceDummy(VoiceTable,VoiceIndex) "ORG VoiceTable+VoiceIndex*0x0c; BYTE $01 $3c $00 $00 $02 $00 $00 $00 $00 $00 $0f $00"
//VoiceDummy is for quick demarcation of unused/empty instrument slots

//Explanation of parameters:
//VoiceTable: the voice table you are writing to. Your instrument map is a voice table; multi instruments and drum instruments also get their own respective table for their own set of samples. This parameter is mainly a precaution against tables overwriting one another.
//VoiceIndex: the slot in the voice table for this instrument (for example, 0 is typically used for the acoustic grand piano). 0x0 thru 0x7f correspond to instruments 0 thru 127.
//BaseNote: the base note. I recommend always using 0x3c (middle C) because I don't think GBA FE supports other notes. Left the option just in case.
//Address: the location of the sample. If you're using a custom sample, this will be a label pointing EA to the data for your sample which will be written to the rom.
//If you just want to use a vanilla sample, you can just use its vanilla address instead of using a label.
//FixedFreq: fixes the frequency of the note so it cannot change in pitch. Typically used for drums. 0x10 =on; 0x0 =off.
//IsForcedPan: whether or not the note should be forced to a certain L/R balance. Typically used for drums. 0x1 =on; 0x0 =off.
//Pan: how far left or right to pan the sample if you turned on IsForcedPan. 0x00 =off. 0x0-0x7f =0 (left) thru 127 (right). This byte is added with IsForcedPan to make a total of 0x80 =0 (all the way left); 0xff =127 (all the way right).
//DutyCycle: the ratio of a square wave's segments, which will change its sound. 0x0 is 12,5%; 0x1 is 25%; 0x2 is 50%; 0x3 is 75%.
//NoteOffWithNoise: the note will be cut off by noise. Used very rarely in sound effects. 0x0 =off; 0x1 =on.
//SweepTime: how long it takes a square wave to sweep from one pitch to another. Sometimes used in sound effects (think weird magic sounds). Must be a multiple of 0x10. 00: disable. 0x10: 7,8ms. 0x20: 15,6ms. 0x30: 23,4ms 0x40: 31,3ms. 0x50: 39,1ms. 0x60: 46,9ms. 0x70: 54,7ms.
//SweepShift: how many bits the wave should be sweeped in pitch. 0x0 or 0x8: disable. 0x1 thru 0x7: add 2 thru 8 bits. 0x9 thru 0xf: subtract 2 thru 8 bits.
//WaveData: a pointer to a 16-byte chart determining the pattern of the wave. 0 thru f determines the amplitude (y co-ordinate) of the wave, with 7-8 being 0 dB.
//example: 0011223468abcdeeffeeddcb97543211 makes sort of a sine wave. ffffffffffffffff0000000000000000 is a square wave.
//NoisePattern: how many samples are used to generate the noise. 0x0: 32768 samples; 0x1: 256 samples.
//MultiSampleTable: a pointer to another instrument table for your multi instrument to use for its samples.
//NoteChart: a label pointing to included data for the note chart, a series of bytes that say which notes should play which samples.
//DrumTable: a pointer to another instrument table for your drums to use.
//Envelope information:
//EnvAtk: Attack, or how long it takes for the instrument to go from zero to full volume when a note starts to be played. Higher values are faster.
//EnvDec: Decay, or how quickly the note loses volume after the attack. Higher values are longer. 0x0 to make the sample not decay at all.
//EnvSus: Sustain, or what level of volume the note should rest at after the attack and decay but while the note is still playing. Higher values are louder. 0xff is the maximum for samples; 0xf is the maximum for waves and noise.
//EnvRel: Release, or how long it takes for the note to drop to zero volume after it is no longer being played. Higher values are longer.



#include "_SongSFXDefinitions.event"

